{"entries":[{"timestamp":1760623590591,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":159,"diffs":[[1,"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":33,"diffs":[[1,"\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":217,"length1":40,"diffs":[[1,"        \"README.md\"\n"]]},{"start1":244,"length1":75,"diffs":[[1,"    \"additionalFilePaths\": []\n"]]}]},{"type":"added","filename":"test.ts","value":"// aquí va el archivo \"tests\"; esto no se compilará cuando este paquete se utilice como una extensión.\n"},{"type":"added","filename":"mhz19.ts","value":"/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\\u2601\"\nnamespace CO2 {\n\n    let _txPin: SerialPin = SerialPin.P0;\n    let _rxPin: SerialPin = SerialPin.P1;\n    let _pwmPin: DigitalPin = DigitalPin.P2;\n    let _co2: number;\n    let _range: number = 5000;\n    let _inputBuffer = control.createBuffer(9);\n\n    const _comandCalibration = control.createBuffer(9);\n    _comandCalibration.setNumber(NumberFormat.Int8LE, 0, 0xff);\n    _comandCalibration.setNumber(NumberFormat.Int8LE, 1, 0x01);\n    _comandCalibration.setNumber(NumberFormat.Int8LE, 2, 0x87);\n    _comandCalibration.setNumber(NumberFormat.Int8LE, 3, 0x00);\n    _comandCalibration.setNumber(NumberFormat.Int8LE, 4, 0x00);\n    _comandCalibration.setNumber(NumberFormat.Int8LE, 5, 0x00);\n    _comandCalibration.setNumber(NumberFormat.Int8LE, 6, 0x00);\n    _comandCalibration.setNumber(NumberFormat.Int8LE, 7, 0x00);\n    _comandCalibration.setNumber(NumberFormat.Int8LE, 8, 0x78);\n\n    const _comandCo2 = control.createBuffer(9);\n    _comandCo2.setNumber(NumberFormat.Int8LE, 0, 0xff);\n    _comandCo2.setNumber(NumberFormat.Int8LE, 1, 0x01);\n    _comandCo2.setNumber(NumberFormat.Int8LE, 2, 0x86);\n    _comandCo2.setNumber(NumberFormat.Int8LE, 3, 0x00);\n    _comandCo2.setNumber(NumberFormat.Int8LE, 4, 0x00);\n    _comandCo2.setNumber(NumberFormat.Int8LE, 5, 0x00);\n    _comandCo2.setNumber(NumberFormat.Int8LE, 6, 0x00);\n    _comandCo2.setNumber(NumberFormat.Int8LE, 7, 0x00);\n    _comandCo2.setNumber(NumberFormat.Int8LE, 8, 0x79);\n\n\n    //% blockId=iniciar_mhz19 block=\"Iniciar Sensor de CO2 con pines TX %pinTx|RX %pinRx|PWM %pinPwm\"\n    export function iniciarSensorMhz(pinTx: SerialPin, pinRx: SerialPin, pinPwm: DigitalPin) {\n        _txPin = pinTx;\n        _rxPin = pinRx;\n        _pwmPin = pinPwm;\n    }\n\n    function esperarSubida() {\n        while (pins.digitalReadPin(_pwmPin)) {\n            control.waitMicros(1);\n        }\n        while (!(pins.digitalReadPin(_pwmPin))) {\n            control.waitMicros(1);\n        }\n    }\n\n    //% blockId=medirco2ppmuart block=\"Co2 PPM PWM\"\n    export function get_co2_pwm(): number {\n        //Espera flanco de subida\n        esperarSubida();\n        //Calcula tiempo en alto\n        let t_ini = input.runningTime();\n        while (pins.digitalReadPin(_pwmPin)) {\n            control.waitMicros(1);\n        }\n        let t_fin = input.runningTime();\n        let t_high = t_fin - t_ini;\n        //Calcula tiempo en bajo\n        t_ini = input.runningTime();\n        while (!(pins.digitalReadPin(_pwmPin))) {\n            control.waitMicros(1);\n        }\n        t_fin = input.runningTime();\n        let t_low = t_fin - t_ini;\n        //Calcula consentracion de co2\n        _co2 = 5000 * ((t_high - 2) / (t_high + (t_low - 4)));\n        return Math.round(_co2);\n\n    }\n\n    export function calibrate_zero() {\n        serial.redirect(_rxPin, _txPin, 9600);\n        serial.writeBuffer(_comandCalibration);\n        serial.redirectToUSB()\n    }\n\n    //% blockId=medir co2 ppm uart block=\"Co2 PPM UART\"\n    export function get_c02_uart() {\n        serial.redirect(_rxPin, _txPin, 9600);\n        serial.writeBuffer(_comandCo2);\n        basic.pause(10);\n        _inputBuffer = serial.readBuffer(9);\n        _co2 = _inputBuffer.getNumber(NumberFormat.UInt8LE, 2) * 256 + _inputBuffer.getNumber(NumberFormat.UInt8LE, 3)\n        serial.redirectToUSB()\n        return _co2;\n    }\n\n}"}]}],"snapshots":[{"timestamp":1760623590590,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"Sensor de CO2 (MHZ19)\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1760623773788}